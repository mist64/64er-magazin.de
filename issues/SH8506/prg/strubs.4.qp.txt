

;strubs.4.qp.prg ==0801==
    5 rem strubs4/4.9.83
   10 '*******************************
   15 '**  ---- strubs.4.qp ---     **
   20 '** 4.9.83                    **
   22 '** strubs.2  -code           **
   25 '** basic prog voruebersetzen **
   30 '** uebersetzt marken in zei- **
   32 '** lennr. ( \name)           **
   35 '** loescht kommentare '...'  **
   36 '**         und blanks        **
   40 '** befehle: mit '!'          **
   41 '**         loop,exit,eloop   **
   43 '**         if,else,fi        **
   45 '**         caseof,of,ecase   **
   46 '**         while,ewhile      **
   47 '**         repeat,until      **
   48 '**         ext:              **
   49 '*******************************
   50 '
   51 print"{clr}";tab(10);"*****************"
   52 print tab(10);"* --strubs.4 -- *"
   55 print tab(10);"*   m.toerk     *"
   57 print tab(10);"* 4352 herten   *"
   58 print tab(10);"*****************"
   67 '
   68 '
   70 !if peek(46)<40 or (peek(46)=40 and peek(45)<3)then'kein prog in editbereich
   71 '
   72 '   ** init edit u. var. bereich:
   73 :   poke46,40:poke45,3:poke 40*256,0:clr
   75 !fi
   78 '
   80 ea=40*256+1'  ** edit-bereich
  100 gosub \init
  140 goto \menue
  148 '
  149 '
  200 '******************************
  205 '**  -- next zeichen   ---   **
  208 '** holt ab adr nc naechstes **
  210 '** relevantes zeichen       **
  212 '** ueberliest blanks und    **
  214 '** kommentare zwischen      **
  215 '** ' und  ' bzw zeilende    **
  217 '** kopiert strings unveraen-**
  218 '** dert nach z$             **
  220 '** ein: nc   -char adr      **
  222 '**      code-variablen      **
  224 '** aus: nc   -adr next char **
  226 '**      c    -char-code     **
  228 '** sef: z$   -zeilenstring  **
  247 '******************************
  248 '
  250 \nexchar:if peek(nc)=bl'ank'  then nc=nc+1:goto \this ' **blanks ueberlesen
  254 '
  260 c=peek(nc)
  265 if c<>ko'mmentar' then \teststring
  267 '
  270 ' ** kommentar  ueberlesen
  280 nc=nc+1:c=peek(nc):if c and c<>ko then \this
  290 if c then nc=nc+1:c=peek(nc)
  295 if c=bl then \nexchar
  298 '
  320 \teststring:  if c<>te'xt' then nc=nc+1:return
  340 '
  345 ' ** string nach z$ uebertragen  **
  350 z$=z$+chr$(c):nc=nc+1:c=peek(nc):if c and c<>te'xt' then \this
  370 nc=nc+1
  390 return
  395 '
  500 '******************************
  505 '** -schreib zeile auf disk- **
  510 '** ein: z$ - zeilenstring   **
  512 '** e/a: aa - linkadresse    **
  513 '**      darf ausserhalb die-**
  514 '**      ser routine nicht!! **
  515 '**      veraendert werden ! **
  520 '** sef: h%                  **
  525 '** imp: fnad - adressfunkt. **
  547 '******************************
  548 '
  550 \schreibzeile:if len(z$)<4 then return' **leerzeile
  555 printfnad(za+2)
  560 aa=aa+len(z$)+2 ' ** linkadr
  565 h%=aa/256
  570 print#1,chr$(aa-256*h%);chr$(h%);z$;
  580 return
  595 '
  700 '*****************************
  704 '** --- holname   ----      **
  706 '** liest name ab adr nc    **
  708 '** bis ":", ",", blank     **
  709 '**     oder zeilenende     **
  710 '** ein: nc                 **
  715 '** aus: nc -adr. next char **
  720 '**      c  -letztes gelese-**
  722 '**         -nes zeichen    **
  728 '**      t$ -name           **
  747 '*****************************
  748 '
  750 \holname:t$=""
  780 ' **** name lesen
  790 !loop
  795 :   c=peek(nc):if c=dp or c=km or c=bl or c=0    then !exit
  800 :   nc=nc+1:t$=t$+chr$(c)
  810 !eloop
  820 nc=nc+1:if c=bl'ank' then gosub \nexchar
  830 return
  835 '
 1000 '*****************************
 1004 '** -- uebersetze marke --  **
 1020 '** ein: z$ -zeilenanfang   **
 1022 '**      nc -akt.char adr   **
 1030 '** aus: z$ -z$+sprungziel  **
 1032 '**      nc -auf letztes    **
 1033 '**          gelesenes char **
 1038 '** sef: i,h,t$             **
 1047 '*****************************
 1048 '
 1050 \marke:gosub \holname
 1115 '
 1120 !if t$="this" then
 1125 :    h=fnad(za+2)
 1130 !else    '** marke suchen  ****
 1140 :    for i=0 to mp:if ma$(i)<>t$ then next
 1160 :    if i>mp then er=2:goto \error:'undefined label
 1170 :    h=ma%(i)+di
 1175 !fi
 1180 z$=z$+mid$(str$(h),2)
 1190 return
 1195 '
 1495 '
 1500 '*********************************
 1504 '** --- befehle im 1.lauf ----  **
 1510 '** sef: sp,s%() stack          **
 1530 '**      i%()    if/case tabelle**
 1532 '**      lo%(,)  looptabelle    **
 1533 '**      er,er%(),ep -errortab. **
 1535 '**      i,in,ta,b$,h,l         **
 1540 '** imp: holname,error,abbruch  **
 1547 '*********************************
 1549 '
 1550 \befehl.l1:gosub \holname
 1551 '
 1560 for i=0 to bm:if t$<>be$(i) then next
 1565 if i>bm then er=0:goto \error ' falscher befehl
 1567 b$=be$(i):if i=3 then b$="if"
 1568 '
 1569 i=i+1  ' ** verteiler **
 1570 onigosub\l1,\ex1,\el1,\if1,\els1,\fi1,\ca1,\of1,\ec1,\et1,\w1,\n1,\r1,\u1
 1571 '
 1572 '** blockstrucktur ausgeben **
 1574 printfnad(za+2);
 1575 if in'dentmodus'=0 then print tab(ta);b$:return
 1577 if in=1 then print tab(ta);b$:ta=ta+1:return
 1579 if in=2 then print tab(ta-1);b$:return
 1581 if in=3 then ta=ta-1:print tab(ta);b$:return
 1585 '
 1586 return
 1588 '
 1589 ' ****  loop  *****
 1600 \l1: if sp'tr'>sm'ax' then er=3:goto \abbruch
 1605 :  if lp>lm then er=5:goto \abbruch
 1609 '  * zeilennr merken:
 1610 :  s'tack'%(sp)=lp:sp=sp+1:lo%(lp,0)=fnad(za+2)-di:lp=lp+1
 1615 :  in'dentmodus'=1:return
 1628 '
 1629 ' **** eloop  *****
 1640 \el1:sp=sp-1:if s'tack'p'ointer'<0 then er=1:goto \abbruch
 1649 '  * zeilennummern zu entsprechendem loop nach lo%(,)
 1650 :  lo'op'%(s%(sp),1)=fnad(za+2)-di
 1660 :  in'dentmodus'=3:return
 1678 '
 1679 ' ** exit     *****
 1680 \ex1: in'dentmodus'=0:return
 1688 '
 1689 '
 1700 ' ** while    *****
 1710 \w1: gosub \l1 'loop':return
 1715 '
 1730 ' *** ewhile ******
 1740 \n1: gosub \el1 'eloop':return
 1745 '
 1800 ' ** repeat *******
 1810 \r1: gosub \l1 'loop':return
 1815 '
 1845 '
 1850 ' ** until  *******
 1860 \u1: gosub \el1 'eloop':return
 1948 '
 1990 '
 2000 ' ****  if  *******
 2005 ' listenplatz fuer spaeteren sprungzieleintrag merken:
 2010 \if1: if sp>sm then er=3:goto \abbruch
 2011 :     if ip>im then er=4:goto \abbruch
 2020 :     s%(sp)=ip:ip=ip+1:sp=sp+1
 2025 :     in'dentmodus'=1:return
 2029 '
 2030 ' **** else *******
 2035 ' zeilennr.+1 als sprungziel fuer zugehoeriges if eintragen:
 2040 \els1:if sp<1 then er=1:goto \abbruch
 2041 :   if ip>im then er=4:goto \abbruch
 2044 :   i%(s%(sp-1))=fnad(za+2)+1-di
 2045 '   * index fuer spaeteren sprungzieleintrag merken:
 2050 :   s%(sp-1)=ip:ip=ip+1
 2052 :   in'dentmodus'=2:return
 2058 '
 2090 ' ****  fi  *******
 2095 ' znr. als sprungziel bei if bzw. else eintragen
 2100 \fi1: if sp<1 then er=1:goto \abbruch
 2105 :     sp=sp-1:i%(s%(sp))=fnad(za+2)-di
 2107 :     in'dentmodus'=3:return
 2108 '
 2110 '
 2150 ' **** caseof *****
 2160 \ca1: if sp>sm then er=3:goto \abbruch
 2165 :     s%(sp)=-1:sp=sp+1
 2170 :     gosub \if1
 2180 :     in'dentm.'=1:return
 2185 '
 2200 ' ***** of   ******
 2210 \of1: gosub \els1
 2230 :     gosub \if1
 2240 :     in'dentm.'=2:return
 2245 '
 2250 ' ***** ecase *****
 2260 \ec1: h=fnad(za+2)-di ' * zeilennr
 2269 '  ** ausgaenge eintragen
 2270 :  !loop
 2275 :      if sp<1 then er=1:goto \abbruch
 2280 :      sp=sp-1:i=s%(sp)
 2290 :      if i<0 then !exit
 2300 :      i%(i)=h
 2310 :  !eloop
 2320 :  in'dentm.'=3:return
 2330 '
 2399 ' *** ext/const ***
 2400 \et1: !loop
 2410 :     if mp>mm then er=6:goto \abbruch
 2415 :     if c and c<>la'bel' then gosub \nexchar:goto \this
 2420 :     if c then gosub \holname
 2423 :     if c then gosub \nexchar
 2425 :     if c<48 or c>57 then 'keine ziffer' er=9:goto \error
 2430 :     ma$(mp)=t$:h=c
 2438 '
 2439 '     ** wert des labels: **
 2440 :     gosub \holname
 2450 :     ma%(mp)=val(chr$(h)+t$)-di
 2460 :     mp=mp+1
 2470 :     if c=0 then !exit
 2480 !eloop
 2481 '
 2485 in'dentm.'=0:return
 2495 '
 2497 '
 2500 '*********************************
 2504 '** --- befehle im 2.lauf ----  **
 2510 '** sef: stack                  **
 2530 '**      ip,lp - tab. pointer   **
 2534 '**      z$  - zeilenstring     **
 2540 '** imp: holname                **
 2547 '*********************************
 2549 '
 2550 \befehl.l2:gosub \holname
 2551 '
 2560 for i=0 to bm:if t$<>be$(i) then next
 2565 if i>bm then er=0:goto \error ' * falscher befehl
 2567 '
 2568 i=i+1  ' ** verteiler **
 2570 onigosub\l2,\ex2,\el2,\if2,\els2,\fi2,\ca2,\of2,\ec2,\et2,\w2,\n2,\r2,\u2
 2575 return
 2576 '
 2589 ' ****  loop  *****
 2590 \l2:if c=0 then z$=z$+":"
 2592 '   index von loop/eloop paar merken
 2595 :   s%(sp)=lp:sp=sp+1:lp=lp+1
 2597 :   return
 2628 '
 2629 ' **** eloop  *****
 2630 \el2: sp=sp-1
 2639 '   * sprung zu entspr. loop
 2640 :   z$=z$+g'o't'o'$+mid$(str$(lo%(s%(sp),0)+di),2)+nu$
 2642 :   gosub \schreibzeile
 2645 '   * folgezeile als sprungziel generieren
 2647 :   l=peek(za+2)+1:h=peek(za+3):if l>255 then l=0:h=h+1
 2648 :   z$=chr$(l)+chr$(h) +":"
 2650 :   return
 2652 '
 2680 ' ****  exit  *****
 2685 \ex2:b$="":if right$(z$,1)<>chr$(167) 'then-code' then b$=g'o't'o'$
 2689 '   * sprung zu naechstem eloop
 2693 :   z$=z$+b$+mid$(str$(lo%(s%(sp-1),1)+di+1),2)
 2695 :   return
 2947 '
 2955 '
 3000 ' ****  if  ********
 3010 \if2: z$=z$+i'f'c$+no't'$+"("+chr$(c)
 3020 :    gosub \nexchar:if c<>th'en' and c then z$=z$+chr$(c): goto \this
 3030 :    z$=z$+")"+chr$(th'en')+mid$(str$(i%(ip)+di),2)
 3035 '
 3036 :    ip=ip+1:c=0:return
 3039 '
 3080 ' **** else ********
 3090 \els2: z$=z$+g'o't'o'$+mid$(str$(i%(ip)+di),2)+nu$
 3100 :    gosub \schreibzeile
 3110 '   * folgezeile als sprungziel generieren:
 3120 :   l=peek(za+2)+1:h=peek(za+3):if l>255 then l=0:h=h+1
 3130 :   z$=chr$(l)+chr$(h) +":"
 3140 :   ip=ip+1:return
 3149 '
 3180 ' ****  fi  ********
 3190 \fi2: l=peek(za+2):h=peek(za+3)
 3195 '   * zeile als sprungziel generieren:
 3200 :   z$=chr$(l)+chr$(h) +":"
 3210 :   return
 3255 '
 3259 ' ***** caseof ****
 3260 \ca2: gosub \if2:return
 3299 '
 3300 ' ***** of   ******
 3310 \of2: gosub \els2
 3320 :     z$=left$(z$,len(z$)-1) ' ":" weg
 3330 :     gosub \if2
 3340 :     return
 3345 '
 3350 ' ***** ecase *****
 3360 \ec2: gosub \fi2
 3370 :  return
 3380 '
 3385 '
 3399 ' *** ext/const ***
 3400 \et2: z$="":c=0:return  ' *zeile loeschen
 3405 '
 3448 '
 3449 ' *** while   *****
 3450 \w2: gosub \l2 'loop'
 3460 :    z$=z$+i'f'c'ode'$+no't'$+"("
 3469 '    ** bedingung kopieren:
 3470 :    if c<>be'fehl' and c then z$=z$+chr$(c):gosub \nexchar:goto \this
 3480 :    z$=z$+")"+chr$(th'en')
 3488 '    ** analog exit:
 3490 :    z$=z$+mid$(str$(lo%(s%(sp-1),1)+di+1),2)
 3495 :    c=0:return
 3497 '
 3498 '
 3549 ' *** ewhile  *****
 3550 \n2: gosub \el2 'eloop':return
 3555 '
 3557 '
 3579 ' *** repeat  *****
 3580 \r2: gosub \l2 'loop':return
 3585 '
 3599 ' *** until   *****
 3600 \u2: z$=z$+i'f'c$+no't'$+"("
 3605 '
 3609 '   * bedingung kopieren
 3610 :   if c then z$=z$+chr$(c):gosub \nexchar:goto \this
 3619 '   * analog eloop
 3620 :   sp=sp-1:in'dent'=3
 3630 :   z$=z$+")"+chr$(th'en')+mid$(str$(lo%(s%(sp),0)+di),2)
 3640 :   return
 4000 '*****************************
 4004 '** - bearbeite zeile  -    **
 4020 '** ein: za -zeilenadr      **
 4028 '** aus: z$ -zeilenstring   **
 4029 '**          uebersetzte z. **
 4035 '**      left$(z$,2)=zeilnr **
 4040 '** imp: \befehl.l2         **
 4045 '**      \marke             **
 4047 '*****************************
 4048 '
 4050 ' ** zeilennr:       **
 4060 \zeile:z$=chr$(peek(za+2))+chr$(peek(za+3))
 4080 nc=za+4:gosub \nexchar ' 1.zeichen der zeile
 4082 '
 4089 ' **    'tabulator'  **
 4090 if c=dp then gosub \nexchar
 4098 '
 4099 ' ** marke ueberlesen:  **
 4100 !if c=la'bel' then
 4105 :   gosub \holname:if c=dp then gosub \nexchar
 4108 :   if c=0 then z$=z$+":"
 4110 !fi
 4111 '
 4115 nc=nc-1:if c=0 then z$=z$+nu'll'$
 4119 '
 4120 ' ********  zeile lesen   ********
 4130 !loop: if c=0 then !exit
 4131 '
 4132 :   gosub \nexchar
 4138 '
 4150 :   !if c=be'fehl' then
 4155 :      gosub \befehl.l2
 4358 :   !else
 4360 :      if c=la'bel' then gosub \marke
 4378 :   !fi
 4380 :   z$=z$+chr$(c)
 4395 ' ********  bis  zeilenende  *****
 4396 !eloop
 4398 return
 4399 '
 5000 '*****************************
 5005 '** --- uebersetzen ---     **
 5047 '*****************************
 5048 '
 5049 '
 5050 \uebersetzen:  print"{clr}   ***** uebersetzen    ****{down}{down}{down}"
 5052 !if fnad(ea)<ea+5 or fnad(ea)>ea+83 then
 5053 :    print"kein programm vorhanden":gosub \warten:return
 5054 !fi
 5057 '
 5058 print"bitte disk einlegen {down}{down} "
 5059 '
 5060 !loop  print"name fuer objekt-programm"
 5065 :   poke198,1:poke631,34 ' **  " fuer input
 5070 :   input f$
 5080 :   open 1,8,1,f$+",p,w":open 15,8,15
 5090 :   input#15,e,e$:if e=0 then !exit
 5095 :   print"disk err:";e;e$
 5096 :   input"neuer versuch";z$
 5098 :   close1:close15
 5099 :   if z$<>"j" then return
 5100 !eloop
 5118 '
 5119 '
 5120 aa=ea
 5130 print#1,chr$(aa and 256);chr$(aa/256);'  ** startadr.
 5134 '
 5135 print"1.lauf"
 5136 ta'bulator'=7 'fuer blockstruktur ausgabe
 5140 gosub \1.lauf
 5142 '" ** alle bloecke geschlossen?
 5143 if sp>0 then print sp;:er=8:goto \abbruch
 5144 '
 5145 print"2.lauf"
 5150 gosub \2.lauf
 5154 '
 5160 print#1,chr$(0);chr$(0);'  **** prog.ende marke
 5180 close1:print"{down}**";ep;" errors **":gosub \warten
 5190 return
 5198 '
 5199 '
 5500 '*****************************
 5504 '**  --- 1.lauf   ---       **
 5510 '** imp: \nexchar           **
 5512 '**      \mardef            **
 5514 '**      \befehl.l1         **
 5547 '*****************************
 5548 '
 5550 '  *** zeilenad.=editbereich anf
 5555 \1.lauf:   za=ea
 5557 '
 5560 ' ** while nicht progr.ende do ***
 5570 !while  za<>0  !do
 5580 :   nc=za+4:c=peek(nc):nc=nc+1  '1.zeichen der zeile
 5584 '   ** tab ueberlesen:
 5585 :   if c=d'oppel'p'unkt' then gosub \nexchar
 5587 '
 5589 '   ** marke definieren
 5590 :   if c=la'bel' then gosub \mardef:if c=dp then gosub \nexchar
 5599 '
 5619 '   ** befehl:
 5620 :   if c=be'fehl' then gosub \befehl.l1
 5920 :   za=fnad(za)
 5930 !ewhile
 5935 return
 5940 ' **** endwhile ******************
 5995 '
 5996 '
 6000 '*******************************
 6004 '** --- marke definieren  --- **
 6015 '** ein: za -zeilenadr.       **
 6020 '** aus: veraenderte marken-  **
 6022 '**      liste ma$(),ma%(),mp **
 6030 '** sef: nc,t$                **
 6047 '*******************************
 6048 '
 6050 \mardef:    if mp>mm'ax' then er=6:goto \abbruch
 6070 gosub \holname
 6095 '
 6100 ma$(mp)=t$:ma%(mp)=fnad(za+2)-di:mp=mp+1
 6120 return
 6130 '
 6500 '*****************************
 6504 '** --- 2.lauf     ---      **
 6510 '** imp: \zeile             **
 6512 '**      \schreibzeile      **
 6547 '*****************************
 6548 '
 6550 \2.lauf: z'eilen'a'dresse'=e'ditbereich'a'nfang':z1=fnad(za) 'adr. 2.zeile
 6560 lp=0:sp=0:ip=0  ' * pointer ruecksetzen
 6575 '
 6580 !repeat
 6585 :  !if peek(za+4)<>ko'mmentar' then
 6590 :    gosub \zeile  ' bearbeiten
 6600 :    gosub \schreibzeile
 6649 '
 6650 :  !fi
 6655 :  za=z1:z1=fnad(z1) ' adresse naechste zeile
 6660 !until z1=0
 6670 ' * progr. ende *
 6680 return
 6685 '
 8000 '*****************************
 8004 '** --- error      -----    **
 8047 '*****************************
 8050 \error:print"error in";fnad(za+2),er$(er)
 8060 if ep<em then er%(ep,0)=fnad(za+2)-di:er%(ep,1)=er:ep=ep+1
 8080 z$=left$(z$,2)+"***** err:"+er$(er)+"********"
 8090 c$=nu$:c=0  'zeilenende setzen
 8099 return
 8799 '
 8800 '*****************************
 8805 '** umschalten edit bereich **
 8840 '** basic-anfang umsetzen   **
 8847 '*****************************
 8849 '
 8850 '
 8860 \edit:    print"{clr}{down}{down}{down}{down}{down}"
 8870 printtab(9);"*********************"
 8880 printtab(9);"** zurueck mit:    **"
 8882 printtab(9);"** ' ! ' [return]  **"
 8940 printtab(9);"*********************"
 8950 poke44,ea/256:poke ea-1,0:clr:end
 8990 end
40000 '****************************
40010 '**  --- menue ---         **
40048 '****************************
40049 '
40050 \menue:print"{clr}";tab(10);"*****************"
40052 print tab(10);"* -- strubs  -- *"
40053 print tab(10);"*  precompiler  *"
40055 print tab(10);"* bitte waehlen *"
40058 print tab(10);"*****************"
40060 print"{down}{down}{down}{rvon}e{rvof}dit"
40070 print"{down}{rvon}u{rvof}ebersetzen"
40080 print"{down}{rvon}m{rvof}arken-tabelle ausgeben"
40090 print"{down}{rvon}f{rvof}ehler-tabelle ausgeben"
40100 print"{down}{rvon}s{rvof}chluss"
40150 '
40160 get z$:if z$="" then \this
40170 if z$="e" then \edit
40180 if z$="u" then gosub \uebersetzen:goto \menue
40190 if z$="s" then sys 64738 '** kaltstart
40195 if z$="m" then gosub \markentab-aus:goto \menue
40200 if z$="f" then gosub \errortab-aus:goto \menue
40495 goto \menue
45000 '****************************
45010 '*  --- init  ---           *
45048 '****************************
45049 '
45050 ' ** marken-tabelle:
45060 \init: mm'ax'=99:dim ma$(mm),ma%(mm):mp=0
45069 '
45120 '
45130 ' ** loop-tabelle:
45131 ' *lo(..,0)=znr.loop
45132 ' *lo(..,1)=znr. zugehoeriges eloop
45135 l'oop'm'ax'=140:dim lo'op'%(lm,1):l'oop'p'ointer'=0
45138 '
45140 ' ** if-tabelle:
45145 im'ax'=270:dim i%(im):ip=0
45149 '
45188 '
45189 ' ** stack:
45190 sm'ax'=60:dim s'tack'%(sm):sp'tr'=0
45200 '
45209 '
45210 ' ** differenz fuer zeilennr. in integer-array
45220 di=32766
45225 '
45240 ' ** relevante zeichencodes **
45250 dp=asc(":"):ko'mmentar'=asc("'"):la'bel'=asc("\"):nu$=chr$(0):bl=asc(" ")
45253 be'fehl'=asc("!"):te'xt("")'=34:g'o't'o-code'$=chr$(137)
45254 i'f'c'ode'$=chr$(139):th'en-code'=167:no't'$=chr$(168):k'om'm'a-code'=44
45259 '
45260 '***** befehle:  ****************
45265 bm=13:dim be$(bm)
45270 for i=0 to bm:read be$(i):next
45271 be$(3)=i'f'c'ode'$
45272 data loop,exit,eloop,if,else,fi
45273 data caseof,of,ecase,ext
45274 data while,ewhile,repeat,until
45399 '
45400 ' ** adressberechnung:
45410 def fnad(x)=peek(x)+256*peek(x+1)
45412 '
45415 '
45470 ' ** error-tabelle:
45480 em=40:dim er%(em,1):ep=0:dim er$(40)
45490 ' ** fehlermeldungen
45500 fori=0to9:read er$(i):next
45510 data "falscher befehl","blockschachtelung: anfang fehlt"
45511 data "undefinierte marke","stack voll"
45512 data "zu viele if/else/case/of","zu viele loop/while/repeat"
45513 data "zu viele marken",,"block nicht geschlossen"
45514 data "extern declaration"
45595 '
45599 ' ** interpretererw. '!' = poke44,8:run
45600 i=0:read w
45610 poke 704+i,w:i=i+1:read w:if w<256 then \this
45620 data 32,115,0,8,201,33,240,4,40,76,231,167
45630 data 169,8,133,44,169,138,76,231,167,999
45640 ' * umschalten:
45650 for i=0 to 10:read w:poke 750+i,w
45660 next
45670 sys 750
45680 data 169,192,141,8,3,169,2,141,9,3,96
45690 '
45999 return
48000 '********************************
48003 '** - markentabelle ausgeben - **
48048 '********************************
48049 '
48050 \markentab-aus:if mp=0 then return
48055 h=0 ' flag
48057 print"{clr}{down}      ** markentabelle ausgeben **"
48060 input"{down}{down} auf drucker (j/n)";b$
48070 !if b$="j" then
48075 :   print" drucker an?":gosub \warten
48080 :   open 1,4
48090 !else
48100 :   open 1,3 'bildschirm
48102 :   h=-1 ' flag
48104 !fi
48105 '
48120 for i=0 to mp-1
48140 :   print#1,ma%(i)+di,ma$(i)
48150 :   if i-int(i/10)*10 =0 then if i and h then gosub \warten
48180 next
48185 close1:gosub \warten
48190 return
48195 '
49000 '********************************
49003 '** - fehlertabelle ausgeben - **
49048 '********************************
49049 '
49050 \errortab-aus:if ep=0 then return
49055 h=0 ' flag
49057 print"{clr}{down}      ** fehlertabelle ausgeben **"
49060 input"{down}{down} auf drucker (j/n)";b$
49070 !if b$="j" then
49075 :   print"{down} drucker an?{down}{down}":gosub \warten
49080 :   open 1,4
49090 !else
49100 :   open 1,3 'bildschirm
49102 :   h=-1 ' flag
49104 !fi
49105 '
49110 print#1,ep;" errors"
49120 for i=0 to ep-1
49140 :   print#1, er%(i,0)+di;er$(er%(i,1))
49150 :   if i-int(i/10)*10 =0 then if i and h then gosub \warten
49180 next
49185 close1
49191 gosub \warten
49190 return
49195 '
49500 '********************************
49503 '** --- auf taste warten   --- **
49548 '********************************
49549 '
49550 \warten:print"->{left}{left}";
49560 getb$:if b$="" then \this
49570 return
49598 '
49599 '
49950 '********************************
49955 '** --- progr.abbruch      --- **
49958 '** schliesst file             **
49970 '** gibt fehlermeldung aus     **
49975 '** ein: er -fehlercode        **
49990 '********************************
50000 \abbruch: print "{down}* fehler beheben, dann neu versuchen *"
50008 print:print er$(er);" in ";fnad(za+2)
50010 print#1,chr$(0);chr$(0); '  **** prog.ende marke
50020 close1
50030 gosub \warten
50040 gosub \errortab-aus
50050 run

